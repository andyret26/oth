// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using othApi.Data;

#nullable disable

namespace othApi.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240419115127_MappSuggestions")]
    partial class MappSuggestions
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HostedTournamentPlayer", b =>
                {
                    b.Property<int>("OtmTournamentsId")
                        .HasColumnType("integer");

                    b.Property<int>("PlayersId")
                        .HasColumnType("integer");

                    b.HasKey("OtmTournamentsId", "PlayersId");

                    b.HasIndex("PlayersId");

                    b.ToTable("OtmTournamentPlayer", (string)null);
                });

            modelBuilder.Entity("HostedTournamentStaff", b =>
                {
                    b.Property<int>("StaffId")
                        .HasColumnType("integer");

                    b.Property<int>("TournamentsId")
                        .HasColumnType("integer");

                    b.HasKey("StaffId", "TournamentsId");

                    b.HasIndex("TournamentsId");

                    b.ToTable("OtmTournamentStaff", (string)null);
                });

            modelBuilder.Entity("PlayerTeam", b =>
                {
                    b.Property<int>("PlayersId")
                        .HasColumnType("integer");

                    b.Property<int>("TeamsId")
                        .HasColumnType("integer");

                    b.HasKey("PlayersId", "TeamsId");

                    b.HasIndex("TeamsId");

                    b.ToTable("OtmTeamPlayer", (string)null);
                });

            modelBuilder.Entity("PlayerTournament", b =>
                {
                    b.Property<int>("TeamMatesId")
                        .HasColumnType("integer");

                    b.Property<int>("TournamentsId")
                        .HasColumnType("integer");

                    b.HasKey("TeamMatesId", "TournamentsId");

                    b.HasIndex("TournamentsId");

                    b.ToTable("PlayerTournament", (string)null);
                });

            modelBuilder.Entity("othApi.Data.Entities.Otm.Host", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OtmHosts");
                });

            modelBuilder.Entity("othApi.Data.Entities.Otm.HostedTournament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FormuPostLink")
                        .HasColumnType("text");

                    b.Property<int>("HostId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsTeamTourney")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxTeamSize")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RankRange")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("HostId");

                    b.ToTable("OtmTournaments");
                });

            modelBuilder.Entity("othApi.Data.Entities.Otm.Round", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("HostedTournamentId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("HostedTournamentId");

                    b.ToTable("Round");
                });

            modelBuilder.Entity("othApi.Data.Entities.Otm.Staff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<List<string>>("Roles")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OtmStaff");
                });

            modelBuilder.Entity("othApi.Data.Entities.Otm.Stats", b =>
                {
                    b.Property<int>("MapId")
                        .HasColumnType("integer");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<int>("RoundId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Acc")
                        .HasColumnType("numeric");

                    b.Property<List<string>>("Mods")
                        .HasColumnType("text[]");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.HasKey("MapId", "PlayerId", "RoundId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("RoundId");

                    b.ToTable("Stats");
                });

            modelBuilder.Entity("othApi.Data.Entities.Otm.TMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Ar")
                        .HasColumnType("numeric");

                    b.Property<int>("Bpm")
                        .HasColumnType("integer");

                    b.Property<decimal>("Cs")
                        .HasColumnType("numeric");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<decimal>("Length")
                        .HasColumnType("numeric");

                    b.Property<string>("Link")
                        .HasColumnType("text");

                    b.Property<string>("Mapper")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Mod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<decimal>("Od")
                        .HasColumnType("numeric");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer");

                    b.Property<int?>("RoundId")
                        .HasColumnType("integer");

                    b.Property<int?>("RoundId1")
                        .HasColumnType("integer");

                    b.Property<decimal>("Sr")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("RoundId");

                    b.HasIndex("RoundId1");

                    b.ToTable("TMap");
                });

            modelBuilder.Entity("othApi.Data.Entities.Otm.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("HostedTournamentId")
                        .HasColumnType("integer");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("HostedTournamentId");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("othApi.Data.Entities.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Avatar_url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country_code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DiscordTag")
                        .HasColumnType("text");

                    b.Property<int>("Global_rank")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("othApi.Data.Entities.Tournament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AddedById")
                        .HasColumnType("integer");

                    b.Property<string>("BracketLink")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Format")
                        .HasColumnType("text");

                    b.Property<string>("ForumPostLink")
                        .HasColumnType("text");

                    b.Property<string>("ImageLink")
                        .HasColumnType("text");

                    b.Property<string>("MainSheetLink")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("Placement")
                        .HasColumnType("text");

                    b.Property<string>("RankRange")
                        .HasColumnType("text");

                    b.Property<int?>("Seed")
                        .HasColumnType("integer");

                    b.Property<string>("TeamName")
                        .HasColumnType("text");

                    b.Property<string>("TeamSize")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddedById");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("HostedTournamentPlayer", b =>
                {
                    b.HasOne("othApi.Data.Entities.Otm.HostedTournament", null)
                        .WithMany()
                        .HasForeignKey("OtmTournamentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("othApi.Data.Entities.Player", null)
                        .WithMany()
                        .HasForeignKey("PlayersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HostedTournamentStaff", b =>
                {
                    b.HasOne("othApi.Data.Entities.Otm.Staff", null)
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("othApi.Data.Entities.Otm.HostedTournament", null)
                        .WithMany()
                        .HasForeignKey("TournamentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlayerTeam", b =>
                {
                    b.HasOne("othApi.Data.Entities.Player", null)
                        .WithMany()
                        .HasForeignKey("PlayersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("othApi.Data.Entities.Otm.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlayerTournament", b =>
                {
                    b.HasOne("othApi.Data.Entities.Player", null)
                        .WithMany()
                        .HasForeignKey("TeamMatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("othApi.Data.Entities.Tournament", null)
                        .WithMany()
                        .HasForeignKey("TournamentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("othApi.Data.Entities.Otm.HostedTournament", b =>
                {
                    b.HasOne("othApi.Data.Entities.Otm.Host", "Host")
                        .WithMany("Tournaments")
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Host");
                });

            modelBuilder.Entity("othApi.Data.Entities.Otm.Round", b =>
                {
                    b.HasOne("othApi.Data.Entities.Otm.HostedTournament", null)
                        .WithMany("Rounds")
                        .HasForeignKey("HostedTournamentId");
                });

            modelBuilder.Entity("othApi.Data.Entities.Otm.Stats", b =>
                {
                    b.HasOne("othApi.Data.Entities.Otm.TMap", "Map")
                        .WithMany("Stats")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("othApi.Data.Entities.Player", "Player")
                        .WithMany("Stats")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("othApi.Data.Entities.Otm.Round", "Round")
                        .WithMany()
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Map");

                    b.Navigation("Player");

                    b.Navigation("Round");
                });

            modelBuilder.Entity("othApi.Data.Entities.Otm.TMap", b =>
                {
                    b.HasOne("othApi.Data.Entities.Otm.Round", null)
                        .WithMany("MapSuggestions")
                        .HasForeignKey("RoundId");

                    b.HasOne("othApi.Data.Entities.Otm.Round", null)
                        .WithMany("Mappool")
                        .HasForeignKey("RoundId1");
                });

            modelBuilder.Entity("othApi.Data.Entities.Otm.Team", b =>
                {
                    b.HasOne("othApi.Data.Entities.Otm.HostedTournament", null)
                        .WithMany("Teams")
                        .HasForeignKey("HostedTournamentId");
                });

            modelBuilder.Entity("othApi.Data.Entities.Tournament", b =>
                {
                    b.HasOne("othApi.Data.Entities.Player", "AddedBy")
                        .WithMany()
                        .HasForeignKey("AddedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddedBy");
                });

            modelBuilder.Entity("othApi.Data.Entities.Otm.Host", b =>
                {
                    b.Navigation("Tournaments");
                });

            modelBuilder.Entity("othApi.Data.Entities.Otm.HostedTournament", b =>
                {
                    b.Navigation("Rounds");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("othApi.Data.Entities.Otm.Round", b =>
                {
                    b.Navigation("MapSuggestions");

                    b.Navigation("Mappool");
                });

            modelBuilder.Entity("othApi.Data.Entities.Otm.TMap", b =>
                {
                    b.Navigation("Stats");
                });

            modelBuilder.Entity("othApi.Data.Entities.Player", b =>
                {
                    b.Navigation("Stats");
                });
#pragma warning restore 612, 618
        }
    }
}
